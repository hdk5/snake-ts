{"version":3,"sources":["webpack:///webpack/bootstrap a27ac4f6c8e5f8e115b8","webpack:///./src/Direction.ts","webpack:///./src/Util.ts","webpack:///./src/Game.ts","webpack:///./src/Coords.ts","webpack:///./src/app.ts","webpack:///./src/CanvasHelper.ts","webpack:///./src/tilemap.ts","webpack:///./src/tilemap/food.png","webpack:///./src/tilemap/field_empty.png","webpack:///./src/tilemap/field_wall.png","webpack:///./src/tilemap/enemy_head.png","webpack:///./src/tilemap/enemy_tail.png","webpack:///./src/tilemap/enemy_straight.png","webpack:///./src/tilemap/enemy_rotate.png","webpack:///./src/tilemap/player_head.png","webpack:///./src/tilemap/player_tail.png","webpack:///./src/tilemap/player_straight.png","webpack:///./src/tilemap/player_rotate.png","webpack:///./src/AiHelper.ts","webpack:///./src/HtmlHelper.ts","webpack:///./src/GamePreset.ts","webpack:///./src/Snake.ts","webpack:///./src/Field.ts"],"names":["__webpack_require__","moduleId","installedModules","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Direction","id","this","Left","Right","Up","Down","Util","divident","divisor","arr","Math","floor","random","length","clone","_step","_iterator","Symbol","iterator","_iteratorNormalCompletion","next","done","obj","value","push","Game","htmlRoot","_htmlHelper","_HtmlHelper2","default","_canvasHelper","_CanvasHelper2","gameInit","console","log","onkeydown","gameOver","difficulty","init","gameProgress","_difficulty","_field","field","_snakes","_Util2","cloneArray","snakes","_food","createFood","_score","ev","keyCode","_this","_player","direction","_Direction2","cancelAnimationFrame","_frameId","_lastFrameTimeStamp","performance","now","requestAnimationFrame","animationLoop","bind","cells","height","j","width","_Coords2","cellLoop","_i","blocks","block","equals","splice","_step2","_iterator2","_iteratorNormalCompletion2","snake","_step3","_iterator3","_iteratorNormalCompletion3","_block","choice","frameTimeStamp","gameScore","drawField","drawFood","drawSnake","SnakeType","Player","_step4","_iterator4","_enemies","_iteratorNormalCompletion4","enemy","Enemy","_step5","_iterator5","_iteratorNormalCompletion5","_AiHelper2","decide","_step6","_iterator6","filter","alive","_iteratorNormalCompletion6","move","_step7","_iterator7","_iteratorNormalCompletion7","_snake","feed","root","canvas","slice","coords","self","other","CELL_SIZE","Coords","row","column","_row","_column","game","document","getElementById","window","CanvasHelper","_game","point","drawCell","_tilemap2","food","_canvas","_Game2","fieldEmpty","fieldWall","type","to","from","image","canvasX","canvasY","angle","head","reverse","PI","playerHead","tail","playerTail","body","mod","columns","rows","playerStraight","playerRotate","enemyHead","enemyRotate","enemyStraight","enemyTail","ctx","getContext","save","translate","rotate","drawImage","restore","Tilemap","Image","src","player","directions","HtmlHelper","_htmlRoot","createElement","appendChild","createTextNode","_gameScore","_gameProgress","difficultyInput","min","max","fieldSelect","fieldOption","text","add","gameStart","innerHTML","onclick","Number","gamePreset","selectedIndex","_GamePreset2","Inf","Box","initGame","_gameInit","playAgain","gameOverScore","String","score","_gameOver","lastChild","removeChild","GamePreset","_Field2","_Snake2","fieldBlocks","_height","_width","Snake","fieldHeight","fieldWidth","initial","_feed","_nextDirection","_alive","_rows","_columns","_direction","pop","unshift","checkCollisions","Field","_blocks"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap a27ac4f6c8e5f8e115b8","class Direction {\r\n    public static Up = new Direction(\"Up\");\r\n    public static Down = new Direction(\"Down\");\r\n    public static Left = new Direction(\"Left\");\r\n    public static Right = new Direction(\"Right\");\r\n\r\n    constructor(private id: string) {\r\n    }\r\n\r\n    reverse(): Direction {\r\n        switch (this) {\r\n            case Direction.Left:\r\n                return Direction.Right;\r\n            case Direction.Right:\r\n                return Direction.Left;\r\n            case Direction.Up:\r\n                return Direction.Down;\r\n            case Direction.Down:\r\n                return Direction.Up;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Direction;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Direction.ts","export default class Util {\r\n    static mod(divident: number, divisor: number): number {\r\n        return ((divident % divisor) + divisor) % divisor;\r\n    };\r\n\r\n    static choice<T>(arr: Array<T>): T {\r\n        return arr[Math.floor(Math.random() * arr.length)] || null;\r\n    }\r\n\r\n    static cloneArray<T extends {clone: () => T}>(arr: Array<T>): Array<T> {\r\n        let clone: Array<T> = [];\r\n        for (let obj of arr) {\r\n            clone.push(obj.clone());\r\n        }\r\n        return clone;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Util.ts","import Snake from \"./Snake\";\r\nimport Coords from \"./Coords\";\r\nimport Direction from \"./Direction\";\r\nimport Field from \"./Field\";\r\nimport GamePreset from \"./GamePreset\";\r\nimport CanvasHelper from \"./CanvasHelper\";\r\nimport Util from \"./Util\";\r\nimport AiHelper from \"./AiHelper\";\r\nimport HtmlHelper from \"./HtmlHelper\";\r\n\r\nexport default class Game {\r\n    static readonly CELL_SIZE: number = 25;\r\n    private _lastFrameTimeStamp: number;\r\n    private _snakes: Array<Snake>;\r\n    private _field: Field;\r\n    private _food: Coords;\r\n    private _frameId: number;\r\n    private _canvasHelper: CanvasHelper;\r\n    private _htmlHelper: HtmlHelper;\r\n\r\n    constructor(htmlRoot: HTMLElement) {\r\n        this._htmlHelper = new HtmlHelper(this, htmlRoot);\r\n        this._canvasHelper = new CanvasHelper(this);\r\n\r\n        this._htmlHelper.gameInit();\r\n\r\n        console.log(\"Game object created.\");\r\n    }\r\n\r\n    private _score: number;\r\n\r\n    get score(): number {\r\n        return this._score;\r\n    }\r\n\r\n    get htmlRoot(): HTMLElement {\r\n        return this._htmlHelper.root;\r\n    }\r\n\r\n    private _difficulty: number;\r\n\r\n    get difficulty(): number {\r\n        return this._difficulty;\r\n    }\r\n\r\n    set difficulty(value: number) {\r\n        this._difficulty = value;\r\n    }\r\n\r\n    get canvas(): HTMLCanvasElement {\r\n        return this._htmlHelper.canvas;\r\n    };\r\n\r\n    private get _player(): Snake {\r\n        return this._snakes[0]\r\n    }\r\n\r\n    private get _enemies(): Array<Snake> {\r\n        return this._snakes.slice(1);\r\n    }\r\n\r\n    static checkSelfCollisions(coords: Array<Coords>): Coords {\r\n        for (let i = 0; i < coords.length; ++i) {\r\n            for (let j = i + 1; j < coords.length; ++j) {\r\n                if (coords[i].equals(coords[j])) {\r\n                    return coords[i].clone();\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    static checkCollisions(self: Array<Coords>, other: Array<Coords>): Coords {\r\n        for (let i = 0; i < self.length; ++i) {\r\n            for (let j = 0; j < other.length; ++j) {\r\n                if (self[i].equals(other[j])) {\r\n                    return self[i].clone();\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    gameOver() {\r\n        this.htmlRoot.onkeydown = null;\r\n        this._htmlHelper.gameOver();\r\n    }\r\n\r\n    initGame(difficulty: number, init: GamePreset) {\r\n        this._htmlHelper.gameProgress();\r\n        this._difficulty = difficulty;\r\n        this._field = init.field.clone();\r\n        this._snakes = Util.cloneArray(init.snakes);\r\n        this._food = this.createFood();\r\n        this._score = 0;\r\n\r\n        this.htmlRoot.onkeydown = ev => {\r\n            switch (ev.keyCode) {\r\n                case 37:\r\n                    this._player.direction = Direction.Left;\r\n                    break;\r\n                case 38:\r\n                    this._player.direction = Direction.Up;\r\n                    break;\r\n                case 39:\r\n                    this._player.direction = Direction.Right;\r\n                    break;\r\n                case 40:\r\n                    this._player.direction = Direction.Down;\r\n                    break;\r\n            }\r\n        };\r\n\r\n        cancelAnimationFrame(this._frameId);\r\n        this._lastFrameTimeStamp = performance.now();\r\n        this._frameId = requestAnimationFrame(this.animationLoop.bind(this));\r\n    }\r\n\r\n    private createFood(): Coords {\r\n        let cells: Array<Coords> = [];\r\n        for (let i = 0; i < this._field.height; ++i) {\r\n            for (let j = 0; j < this._field.width; ++j) {\r\n                cells.push(new Coords(i, j));\r\n            }\r\n        }\r\n\r\n        cellLoop: for (let i = cells.length - 1; i >= 0; --i) {\r\n            for (let block of this._field.blocks) {\r\n                if (cells[i].equals(block)) {\r\n                    cells.splice(i, 1);\r\n                    continue cellLoop;\r\n                }\r\n            }\r\n\r\n            for (let snake of this._snakes) {\r\n                for (let block of snake.snake) {\r\n                    if (cells[i].equals(block)) {\r\n                        cells.splice(i, 1);\r\n                        continue cellLoop;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return Util.choice(cells);\r\n\r\n    }\r\n\r\n    private animationLoop(frameTimeStamp: number) {\r\n        if (frameTimeStamp - this._lastFrameTimeStamp < 1000 / this._difficulty) {\r\n            requestAnimationFrame(this.animationLoop.bind(this));\r\n            return;\r\n        }\r\n        this._lastFrameTimeStamp = frameTimeStamp;\r\n\r\n        this._htmlHelper.gameScore = this._score;\r\n\r\n        this._canvasHelper.drawField(this._field);\r\n        this._canvasHelper.drawFood(this._food);\r\n        this._canvasHelper.drawSnake(this._player, CanvasHelper.SnakeType.Player);\r\n        for (let enemy of this._enemies) {\r\n            this._canvasHelper.drawSnake(enemy, CanvasHelper.SnakeType.Enemy);\r\n        }\r\n\r\n        for (let enemy of this._enemies) {\r\n            enemy.direction = AiHelper.decide(null, null, null);\r\n        }\r\n\r\n        for (let snake of this._snakes.filter(value => value.alive)) {\r\n            snake.move();\r\n        }\r\n\r\n        for (let snake of this._snakes) {\r\n            if (snake.snake[0].equals(this._food)) {\r\n                snake.feed();\r\n                this._food = this.createFood();\r\n                if (snake == this._player) {\r\n                    this._score += this._difficulty;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        this._frameId = requestAnimationFrame(this.animationLoop.bind(this));\r\n    }\r\n\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Game.ts","export default class Coords {\r\n    constructor(row: number, column: number) {\r\n        this._row = row;\r\n        this._column = column;\r\n    }\r\n\r\n    private _row: number;\r\n\r\n    get row(): number {\r\n        return this._row;\r\n    }\r\n\r\n    set row(value: number) {\r\n        this._row = value;\r\n    }\r\n\r\n    private _column: number;\r\n\r\n    get column(): number {\r\n        return this._column;\r\n    }\r\n\r\n    set column(value: number) {\r\n        this._column = value;\r\n    }\r\n\r\n    clone(): Coords {\r\n        return new Coords(this._row, this._column)\r\n    }\r\n\r\n    equals(obj: Coords): boolean {\r\n        return this.row == obj.row && this.column == obj.column;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Coords.ts","// import tilemap from './tilemap'\r\n// import Direction from './Direction'\r\n// import Snake from './Snake'\r\n// import Coords from \"./Coords\"\r\n// import Field from \"./Field\"\r\nimport Game from \"./Game\"\r\n// import GamePreset from \"./GamePreset\";\r\n// import Util from \"./Util\";\r\n\r\n\r\n// (window as any).Snake = Snake;\r\n// (window as any).Field = Field;\r\n// (window as any).Coords = Coords;\r\n// (window as any).Game = Game;\r\n// (window as any).Direction = Direction;\r\n// (window as any).tilemap = tilemap;\r\n// (window as any).GamePreset = GamePreset;\r\n// (window as any).Util = Util;\r\n//\r\nlet game = new Game(document.getElementById(\"game_root\"));\r\n// game.initGame(GamePreset.Box);\r\n(window as any).game = game;\r\n\r\nconsole.log(\"Bundle loaded\");\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app.ts","import Snake from \"./Snake\";\r\nimport Direction from \"./Direction\";\r\nimport Game from \"./Game\";\r\nimport Coords from \"./Coords\";\r\nimport Util from \"./Util\";\r\nimport tilemap from \"./tilemap\";\r\nimport Field from \"./Field\";\r\n\r\nenum SnakeType { Player, Enemy }\r\n\r\nexport default class CanvasHelper {\r\n    static SnakeType = SnakeType;\r\n    private _game: Game;\r\n\r\n    constructor(game: Game) {\r\n        this._game = game;\r\n    }\r\n\r\n    private get _canvas() {\r\n        return this._game.canvas\r\n    }\r\n\r\n    drawFood(point: Coords): void {\r\n        this.drawCell(tilemap.food, point.column, point.row, 0);\r\n    }\r\n\r\n    drawField(field: Field): void {\r\n        this._canvas.width = field.width * Game.CELL_SIZE;\r\n        this._canvas.height = field.height * Game.CELL_SIZE;\r\n        for (let i = 0; i < field.width; ++i) {\r\n            for (let j = 0; j < field.height; ++j) {\r\n                this.drawCell(tilemap.fieldEmpty, i, j, 0);\r\n            }\r\n        }\r\n        for (let block of field.blocks) {\r\n            this.drawCell(tilemap.fieldWall, block.column, block.row, 0);\r\n        }\r\n    }\r\n\r\n    drawSnake(snake: Snake, type: SnakeType): void {\r\n        let to: Direction, from: Direction;\r\n\r\n        for (let i = 0; i < snake.snake.length; ++i) {\r\n            let image: HTMLImageElement, canvasX, canvasY, angle;\r\n            if (i == 0) {\r\n                let head = snake.snake[i];\r\n                from = snake.direction.reverse();\r\n                switch (from) {\r\n                    case Direction.Down:\r\n                        angle = 0;\r\n                        break;\r\n                    case Direction.Left:\r\n                        angle = Math.PI / 2;\r\n                        break;\r\n                    case Direction.Up:\r\n                        angle = Math.PI;\r\n                        break;\r\n                    case Direction.Right:\r\n                        angle = Math.PI * 3 / 2;\r\n                        break;\r\n                }\r\n                image = tilemap.playerHead;\r\n\r\n                canvasX = head.column;\r\n                canvasY = head.row;\r\n            } else if (i == snake.snake.length - 1) {\r\n                let tail = snake.snake[i];\r\n                to = from.reverse();\r\n                switch (to) {\r\n                    case Direction.Up:\r\n                        angle = 0;\r\n                        break;\r\n                    case Direction.Right:\r\n                        angle = Math.PI / 2;\r\n                        break;\r\n                    case Direction.Down:\r\n                        angle = Math.PI;\r\n                        break;\r\n                    case Direction.Left:\r\n                        angle = Math.PI * 3 / 2;\r\n                        break;\r\n                }\r\n                image = tilemap.playerTail;\r\n\r\n                canvasX = tail.column;\r\n                canvasY = tail.row;\r\n            } else {\r\n                to = from.reverse();\r\n                let body = snake.snake[i];\r\n                let next = snake.snake[i + 1];\r\n                if (body.row == next.row) {\r\n                    if (Util.mod(body.column + 1, snake.columns) == next.column) {\r\n                        from = Direction.Right;\r\n                    } else if (Util.mod(body.column - 1, snake.columns) == next.column) {\r\n                        from = Direction.Left;\r\n                    }\r\n                } else if (body.column == next.column) {\r\n                    if (Util.mod(body.row + 1, snake.rows) == next.row) {\r\n                        from = Direction.Down;\r\n                    } else if (Util.mod(body.row - 1, snake.rows) == next.row) {\r\n                        from = Direction.Up;\r\n                    }\r\n                }\r\n                if ((from == Direction.Left && to == Direction.Right)\r\n                    || (from == Direction.Right && to == Direction.Left)) {\r\n                    image = tilemap.playerStraight;\r\n                    angle = Math.PI / 2;\r\n                } else if ((from == Direction.Up && to == Direction.Down)\r\n                    || (from == Direction.Down && to == Direction.Up)) {\r\n                    image = tilemap.playerStraight;\r\n                    angle = 0;\r\n                } else if ((from == Direction.Up && to == Direction.Right)\r\n                    || (from == Direction.Right && to == Direction.Up)) {\r\n                    image = tilemap.playerRotate;\r\n                    angle = 0;\r\n                } else if ((from == Direction.Right && to == Direction.Down)\r\n                    || (from == Direction.Down && to == Direction.Right)) {\r\n                    image = tilemap.playerRotate;\r\n                    angle = Math.PI / 2;\r\n                }\r\n                else if ((from == Direction.Down && to == Direction.Left)\r\n                    || (from == Direction.Left && to == Direction.Down)) {\r\n                    image = tilemap.playerRotate;\r\n                    angle = Math.PI;\r\n                }\r\n                else if ((from == Direction.Left && to == Direction.Up)\r\n                    || (from == Direction.Up && to == Direction.Left)) {\r\n                    image = tilemap.playerRotate;\r\n                    angle = Math.PI * 3 / 2;\r\n                }\r\n\r\n\r\n                canvasX = body.column;\r\n                canvasY = body.row;\r\n            }\r\n            // }\r\n\r\n            switch (image) {\r\n                case tilemap.playerHead:\r\n                    switch (type) {\r\n                        case SnakeType.Player:\r\n                            image = tilemap.playerHead;\r\n                            break;\r\n                        case SnakeType.Enemy:\r\n                            image = tilemap.enemyHead;\r\n                            break\r\n                    }\r\n                    break;\r\n                case tilemap.playerRotate:\r\n                    switch (type) {\r\n                        case SnakeType.Player:\r\n                            image = tilemap.playerRotate;\r\n                            break;\r\n                        case SnakeType.Enemy:\r\n                            image = tilemap.enemyRotate;\r\n                            break\r\n                    }\r\n                    break;\r\n                case tilemap.playerStraight:\r\n                    switch (type) {\r\n                        case SnakeType.Player:\r\n                            image = tilemap.playerStraight;\r\n                            break;\r\n                        case SnakeType.Enemy:\r\n                            image = tilemap.enemyStraight;\r\n                            break\r\n                    }\r\n                    break;\r\n                case tilemap.playerTail:\r\n                    switch (type) {\r\n                        case SnakeType.Player:\r\n                            image = tilemap.playerTail;\r\n                            break;\r\n                        case SnakeType.Enemy:\r\n                            image = tilemap.enemyTail;\r\n                            break\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            this.drawCell(image, canvasX, canvasY, angle);\r\n        }\r\n\r\n    };\r\n\r\n    drawCell(image: HTMLImageElement, canvasX: number, canvasY: number, angle: number): void {\r\n        let ctx: CanvasRenderingContext2D = this._canvas.getContext('2d');\r\n        ctx.save();\r\n        ctx.translate(canvasX * Game.CELL_SIZE, canvasY * Game.CELL_SIZE);\r\n        ctx.translate(Game.CELL_SIZE / 2, Game.CELL_SIZE / 2);\r\n        ctx.rotate(angle);\r\n        ctx.drawImage(\r\n            image,\r\n            -Game.CELL_SIZE / 2, -Game.CELL_SIZE / 2, Game.CELL_SIZE, Game.CELL_SIZE\r\n        );\r\n        ctx.restore();\r\n\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/CanvasHelper.ts","declare function require(path: string): any;\r\n\r\n/*\r\nnamespace tilemap {\r\n    export const food: HTMLImageElement = new Image();\r\n    // food.onload = () => console.log(food);\r\n    food.src = require(\"./tilemap/food.png\");\r\n\r\n    export const fieldEmpty: HTMLImageElement = new Image();\r\n    // fieldEmpty.onload = () => console.log(fieldEmpty);\r\n    fieldEmpty.src = require(\"./tilemap/field_empty.png\");\r\n\r\n    export const fieldWall: HTMLImageElement = new Image();\r\n    // fieldWall.onload = () => console.log(fieldWall);\r\n    fieldWall.src = require(\"./tilemap/field_wall.png\");\r\n\r\n    export const enemyHead: HTMLImageElement = new Image();\r\n    // enemyHead.onload = () => console.log(enemyHead);\r\n    enemyHead.src = require(\"./tilemap/enemy_head.png\");\r\n\r\n    export const enemyTail: HTMLImageElement = new Image();\r\n    // enemyTail.onload = () => console.log(enemyTail);\r\n    enemyTail.src = require(\"./tilemap/enemy_tail.png\");\r\n\r\n    export const enemyStraight: HTMLImageElement = new Image();\r\n    // enemyStraight.onload = () => console.log(enemyStraight);\r\n    enemyStraight.src = require(\"./tilemap/enemy_straight.png\");\r\n\r\n    export const enemyRotate: HTMLImageElement = new Image();\r\n    // enemyRotate.onload = () => console.log(enemyRotate);\r\n    enemyRotate.src = require(\"./tilemap/enemy_rotate.png\");\r\n\r\n    export const playerHead: HTMLImageElement = new Image();\r\n    // playerHead.onload = () => console.log(playerHead);\r\n    playerHead.src = require(\"./tilemap/player_head.png\");\r\n\r\n    export const playerTail: HTMLImageElement = new Image();\r\n    // playerTail.onload = () => console.log(playerTail);\r\n    playerTail.src = require(\"./tilemap/player_tail.png\");\r\n\r\n    export const playerStraight: HTMLImageElement = new Image();\r\n    // playerStraight.onload = () => console.log(playerStraight);\r\n    playerStraight.src = require(\"./tilemap/player_straight.png\");\r\n\r\n    export const playerRotate: HTMLImageElement = new Image();\r\n    // playerRotate.onload = () => console.log(playerRotate);\r\n    playerRotate.src = require(\"./tilemap/player_rotate.png\");\r\n\r\n}\r\n*/\r\n\r\nclass Tilemap {\r\n    static food: HTMLImageElement = new Image();\r\n    static fieldEmpty: HTMLImageElement = new Image();\r\n    static fieldWall: HTMLImageElement = new Image();\r\n    static enemyHead: HTMLImageElement = new Image();\r\n    static enemyTail: HTMLImageElement = new Image();\r\n    static enemyStraight: HTMLImageElement = new Image();\r\n    static enemyRotate: HTMLImageElement = new Image();\r\n    static playerHead: HTMLImageElement = new Image();\r\n    static playerTail: HTMLImageElement = new Image();\r\n    static playerStraight: HTMLImageElement = new Image();\r\n    static playerRotate: HTMLImageElement = new Image();\r\n}\r\n\r\nTilemap.food.src = require(\"./tilemap/food.png\");\r\nTilemap.fieldEmpty.src = require(\"./tilemap/field_empty.png\");\r\nTilemap.fieldWall.src = require(\"./tilemap/field_wall.png\");\r\nTilemap.enemyHead.src = require(\"./tilemap/enemy_head.png\");\r\nTilemap.enemyTail.src = require(\"./tilemap/enemy_tail.png\");\r\nTilemap.enemyStraight.src = require(\"./tilemap/enemy_straight.png\");\r\nTilemap.enemyRotate.src = require(\"./tilemap/enemy_rotate.png\");\r\nTilemap.playerHead.src = require(\"./tilemap/player_head.png\");\r\nTilemap.playerTail.src = require(\"./tilemap/player_tail.png\");\r\nTilemap.playerStraight.src = require(\"./tilemap/player_straight.png\");\r\nTilemap.playerRotate.src = require(\"./tilemap/player_rotate.png\");\r\n\r\nexport default Tilemap\n\n\n// WEBPACK FOOTER //\n// ./src/tilemap.ts","module.exports = \"data:image/png;charset=utf-8;base64,iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTnU1rJkAAAAW0lEQVRIS+3NSwoAIAxDwV7F+x9SEQyIRPw1G+nAg65SC2FPTrldIvUBkugfSB6xB8gFGx57wgZnXWFDq46wgd2OsIFVV9jQrCdscMwFG0au5A9A/gDkD8InzArfwu+wergE2QAAAABJRU5ErkJggg==\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/tilemap/food.png\n// module id = 8\n// module chunks = 0","module.exports = \"data:image/png;charset=utf-8;base64,iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAIAAABLixI0AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwQAADsEBuJFr7QAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xOdTWsmQAAAAlSURBVEhL7cxBDQAADISwSUf6NJDckwrosdPldDldTpfT5XQZ8NRFqa6umEEdAAAAAElFTkSuQmCC\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/tilemap/field_empty.png\n// module id = 9\n// module chunks = 0","module.exports = \"data:image/png;charset=utf-8;base64,iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAIAAABLixI0AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwQAADsEBuJFr7QAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xOdTWsmQAAAAmSURBVEhLY3CgHhg1izQwahZpYNQs0sCoWaSBUbNIA6NmkQIcHADt0dTQuDtR2wAAAABJRU5ErkJggg==\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/tilemap/field_wall.png\n// module id = 10\n// module chunks = 0","module.exports = \"data:image/png;charset=utf-8;base64,iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xOdTWsmQAAABzSURBVEhL7cxBCsAgDERRT9P739CW0gGx32asWfrgbwKZsm3fjlpfpaHxviU0OOoXGoqa1jxLdHs+Te3jlUS3O1v/OJONnt1s9Oxmo2e3KTQQNY1Gon6hoVFLaLAvBQ2rNDSu0tC4SkPjKg2NqzQ0rkKlnP3K2OjUhp90AAAAAElFTkSuQmCC\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/tilemap/enemy_head.png\n// module id = 11\n// module chunks = 0","module.exports = \"data:image/png;charset=utf-8;base64,iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xOdTWsmQAAABTSURBVEhL7c2hDcBAEMTAryb9d/hBZo4U4GM3kunu+eW597OMjVPGxilj45SxccrYOGVsnDI2Thkbp4yNU8bGKWPjlLFxytg4pcYPMH6w1hp0zgvIjuLpVy41MAAAAABJRU5ErkJggg==\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/tilemap/enemy_tail.png\n// module id = 12\n// module chunks = 0","module.exports = \"data:image/png;charset=utf-8;base64,iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xOdTWsmQAAABkSURBVEhLrcyxDQAgEIDAn8b9N9SKDqMFl9AyX9be1zI2p4zNKWNzyticMjanjM0pY3PK2JwyNqeMzSljc8rYnDI2p4zNKWNzyticMjanjM0pY3PK2JwyNqeMzSljc8rYnJ5mDpa4dqwbqZseAAAAAElFTkSuQmCC\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/tilemap/enemy_straight.png\n// module id = 13\n// module chunks = 0","module.exports = \"data:image/png;charset=utf-8;base64,iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xOdTWsmQAAABaSURBVEhL7cyxCcBAEAPBq8b9d/iOBA72QQIFDm5gQ2kszznXauhc1dC5qqFzVUPnqobOVQ2dqxo6VzV0/q2CjpMsNEyy0DDJQsMkCw2TbDR2i9CB01rrD2ZeG1xyZF3A6dwAAAAASUVORK5CYII=\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/tilemap/enemy_rotate.png\n// module id = 14\n// module chunks = 0","module.exports = \"data:image/png;charset=utf-8;base64,iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTnU1rJkAAAAiElEQVRIS+2MQQqFQAzF5v6XVvlE6A8ybe3WYDZjX9bHx5bj+iy/5jj8JKfvcGwnkx6OVGRa5y9wk7wxrRGHP2+yt0sSOR52JJHjYUcSOR52JJHjYUcSNTyuyLSOAxWZ9nBkJ5N3OPYkpzMcjXIyx+EoJ3McjnIyx+EoJ3McjnIyx+EoJxvWOgExoLpUIABYmgAAAABJRU5ErkJggg==\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/tilemap/player_head.png\n// module id = 15\n// module chunks = 0","module.exports = \"data:image/png;charset=utf-8;base64,iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTnU1rJkAAAAaUlEQVRIS+2NOQrAMBDE9v+fzgEqBkEgMHZnYVUrxvOH63lfkvR4OCXp8XBK0uPhlKTHwylJj4dTkh4PpyQ9Hk5JejyckvR4OCXp8XBK0uPhlKTHwylJj4dTkjV4/JXTWrZ/cDgcdjJzA4EB0y3M9rbXAAAAAElFTkSuQmCC\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/tilemap/player_tail.png\n// module id = 16\n// module chunks = 0","module.exports = \"data:image/png;charset=utf-8;base64,iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTnU1rJkAAAAhElEQVRIS6WMMQrAQACD7v+fbjs4iNBSiMRNcv5wPXuTZKfHlmSnx5Zkp8eWZKfHlmSnx5Zkp8eWZKfHlmSnx5Zkp8eWZKfHlmSnx5Zkp8eWZKfHlmSnx5Zkp8eWZKfHlmSnx5Zkp8eWZKfHlmSnx5Zkp8eWZKfHlmSnx5Zkp8eW5INzbsODXLJd/56nAAAAAElFTkSuQmCC\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/tilemap/player_straight.png\n// module id = 17\n// module chunks = 0","module.exports = \"data:image/png;charset=utf-8;base64,iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTnU1rJkAAAAbUlEQVRIS+2MMQ6AMAzE+v9PA4OHyBKh0Q0steLt4rXD9dybTHIcrjLJcbjKJMfhKpMch6tMchyuMslxuMokx+EqkxyHLbMMR6eS6fHTVDI9fppKpsdPU8n0+GkqmW/8OJHEHn7elffD4fAva92z41i2DcwJlgAAAABJRU5ErkJggg==\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/tilemap/player_rotate.png\n// module id = 18\n// module chunks = 0","import Field from \"./Field\";\r\nimport Snake from \"./Snake\";\r\nimport Direction from \"./Direction\";\r\nimport Util from \"./Util\";\r\n\r\nexport default class {\r\n    static decide(field : Field, player: Snake, enemy: Snake) : Direction {\r\n        let directions = [Direction.Right, Direction.Left, Direction.Up, Direction.Down];\r\n\r\n        return Util.choice(directions);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AiHelper.ts","import Game from \"./Game\";\r\nimport GamePreset from \"./GamePreset\";\r\n\r\nexport default class HtmlHelper {\r\n    private _game: Game;\r\n    private _htmlRoot: HTMLElement;\r\n    private _gameInit: HTMLDivElement;\r\n    private _gameProgress: HTMLDivElement;\r\n    private _gameOver: HTMLDivElement;\r\n\r\n    constructor(game: Game, htmlRoot: HTMLElement) {\r\n        this._game = game;\r\n        this._htmlRoot = htmlRoot;\r\n\r\n        let gameProgress: HTMLDivElement = document.createElement(\"div\");\r\n        {\r\n            let canvas = document.createElement(\"canvas\");\r\n            gameProgress.appendChild(canvas);\r\n            gameProgress.appendChild(document.createElement(\"br\"));\r\n\r\n            gameProgress.appendChild(document.createTextNode(\"Score: \"));\r\n            let gameScore = document.createElement(\"span\");\r\n            gameProgress.appendChild(gameScore);\r\n\r\n            this._gameScore = gameScore;\r\n            this._canvas = canvas;\r\n        }\r\n        this._gameProgress = gameProgress;\r\n\r\n        let gameInit: HTMLDivElement = document.createElement(\"div\");\r\n        {\r\n            let difficultyInput = document.createElement(\"input\");\r\n            {\r\n                difficultyInput.type = \"number\";\r\n                difficultyInput.min = \"1\";\r\n                difficultyInput.max = \"60\";\r\n                difficultyInput.value = \"10\";\r\n            }\r\n            gameInit.appendChild(document.createTextNode(\"Difficulty: \"));\r\n            gameInit.appendChild(difficultyInput);\r\n            gameInit.appendChild(document.createElement(\"br\"));\r\n\r\n            let fieldSelect = document.createElement(\"select\");\r\n            let fieldOption: HTMLOptionElement;\r\n            fieldOption = document.createElement(\"option\");\r\n\r\n            fieldOption.text = \"Infinite field\";\r\n            fieldSelect.add(fieldOption);\r\n            fieldOption = document.createElement(\"option\");\r\n            fieldOption.text = \"Box\";\r\n            fieldSelect.add(fieldOption);\r\n            gameInit.appendChild(document.createTextNode(\"Field: \"));\r\n            gameInit.appendChild(fieldSelect);\r\n            gameInit.appendChild(document.createElement(\"br\"));\r\n\r\n            let gameStart = document.createElement(\"button\");\r\n            {\r\n                gameStart.innerHTML = \"Start\";\r\n                gameStart.onclick = () => {\r\n                    let difficulty: number = Number(difficultyInput.value);\r\n                    let gamePreset;\r\n                    switch (fieldSelect.selectedIndex) {\r\n                        case 0:\r\n                            gamePreset = GamePreset.Inf;\r\n                            break;\r\n                        case 1:\r\n                            gamePreset = GamePreset.Box;\r\n                            break;\r\n                    }\r\n                    return game.initGame(difficulty, gamePreset);\r\n                };\r\n            }\r\n            gameInit.appendChild(gameStart);\r\n        }\r\n        this._gameInit = gameInit;\r\n\r\n        let gameOver: HTMLDivElement = document.createElement(\"div\");\r\n        {\r\n            let playAgain: HTMLButtonElement = document.createElement(\"button\");\r\n            {\r\n                playAgain.appendChild(document.createTextNode(\"Play again\"));\r\n                playAgain.onclick = () => this.gameInit();\r\n            }\r\n            let gameOverScore = document.createElement(\"div\");\r\n            {\r\n                gameOverScore.appendChild(document.createTextNode(\"You scored \" + String(game.score)));\r\n            }\r\n\r\n            gameOver.appendChild(gameOverScore);\r\n            gameOver.appendChild(playAgain);\r\n        }\r\n        this._gameOver = gameOver;\r\n        // document.body.appendChild(gameInit);\r\n        // document.body.appendChild(this.canvas);\r\n    }\r\n\r\n    private _gameScore: HTMLSpanElement;\r\n\r\n    set gameScore(value: number) {\r\n        this._gameScore.innerHTML = String(value);\r\n    }\r\n\r\n    get root(): HTMLElement {\r\n        return this._htmlRoot;\r\n    }\r\n\r\n    private _canvas: HTMLCanvasElement;\r\n\r\n    get canvas(): HTMLCanvasElement {\r\n        return this._canvas;\r\n    }\r\n\r\n    gameInit(): void {\r\n        while (this._htmlRoot.lastChild) {\r\n            this._htmlRoot.removeChild(this._htmlRoot.lastChild)\r\n        }\r\n        this._htmlRoot.appendChild(this._gameInit)\r\n    }\r\n\r\n    gameProgress(): void {\r\n        while (this._htmlRoot.lastChild) {\r\n            this._htmlRoot.removeChild(this._htmlRoot.lastChild)\r\n        }\r\n        this._htmlRoot.appendChild(this._gameProgress)\r\n    }\r\n\r\n    gameOver(): void {\r\n        while (this._htmlRoot.lastChild) {\r\n            this._htmlRoot.removeChild(this._htmlRoot.lastChild)\r\n        }\r\n        this._htmlRoot.appendChild(this._gameOver)\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/HtmlHelper.ts","import Snake from \"./Snake\";\r\nimport Field from \"./Field\";\r\nimport Coords from \"./Coords\";\r\nimport Direction from \"./Direction\";\r\n\r\nexport default class GamePreset {\r\n\r\n    static Inf: GamePreset;\r\n    static Box: GamePreset;\r\n\r\n    constructor(snakes: Array<Snake>, field: Field) {\r\n        this._snakes = snakes;\r\n        this._field = field;\r\n    }\r\n\r\n    private _snakes: Array<Snake>;\r\n\r\n    get snakes(): Array<Snake> {\r\n        return this._snakes;\r\n    }\r\n\r\n    private _field: Field;\r\n\r\n    get field(): Field {\r\n        return this._field;\r\n    }\r\n\r\n}\r\n\r\n{\r\n    let height = 25;\r\n    let width = 30;\r\n    let field = new Field(height, width, []);\r\n    let player = new Snake(height, width, [new Coords(0, 2), new Coords(0, 1), new Coords(0, 0)], Direction.Right);\r\n    let enemyBL = new Snake(height, width, [new Coords(height - 2, 2), new Coords(height - 1, 2), new Coords(height, 2)], Direction.Up);\r\n    let enemyTR = new Snake(height, width, [new Coords(2, width - 1), new Coords(1, width - 1), new Coords(0, width - 1)], Direction.Down);\r\n    let enemyBR = new Snake(height, width, [new Coords(height - 1, width - 3), new Coords(height - 1, width - 2), new Coords(height - 1, width - 1)], Direction.Left);\r\n    let snakes = [player, enemyBL, enemyTR, enemyBR];\r\n    GamePreset.Inf = new GamePreset(snakes, field);\r\n}\r\n\r\n{\r\n    let height = 25;\r\n    let width = 30;\r\n    let fieldBlocks = [];\r\n    for (let i = 0; i < height; ++i) {\r\n        for (let j = 0; j < width; ++j) {\r\n            if (i == 0 || j == 0 || i == height - 1 || j == width - 1) {\r\n                fieldBlocks.push(new Coords(i, j));\r\n            }\r\n        }\r\n    }\r\n    let field = new Field(height, width, fieldBlocks);\r\n    let player = new Snake(height, width, [new Coords(2, 4), new Coords(2, 3), new Coords(2, 2)], Direction.Right);\r\n    let enemyBL = new Snake(height, width, [new Coords(height - 5, 2), new Coords(height - 4, 2), new Coords(height - 3, 2)], Direction.Up);\r\n    let enemyTR = new Snake(height, width, [new Coords(4, width - 3), new Coords(3, width - 3), new Coords(2, width - 3)], Direction.Down);\r\n    let enemyBR = new Snake(height, width, [new Coords(height - 3, width - 5), new Coords(height - 3, width - 4), new Coords(height - 3, width - 3)], Direction.Left);\r\n    let snakes = [player, enemyBL, enemyTR, enemyBR];\r\n    GamePreset.Box = new GamePreset(snakes, field);\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/GamePreset.ts","import Direction from \"./Direction\"\r\nimport Coords from \"./Coords\";\r\nimport Game from \"./Game\";\r\nimport Util from \"./Util\";\r\n\r\nexport default class Snake {\r\n    private _feed: boolean = false;\r\n    private _nextDirection: Direction = null;\r\n\r\n    constructor(fieldHeight: number, fieldWidth: number, initial: Array<Coords>, direction: Direction) {\r\n        this._rows = fieldHeight;\r\n        this._columns = fieldWidth;\r\n        this._direction = direction;\r\n        this._snake = initial;\r\n    }\r\n\r\n    private _rows: number;\r\n\r\n    get rows(): number {\r\n        return this._rows;\r\n    }\r\n\r\n    private _columns: number;\r\n\r\n    get columns(): number {\r\n        return this._columns;\r\n    }\r\n\r\n    private _snake: Array<Coords> = [];\r\n\r\n    get snake(): Array<Coords> {\r\n        return this._snake;\r\n    }\r\n\r\n    private _alive: boolean = true;\r\n\r\n    get alive(): boolean {\r\n        return this._alive;\r\n    }\r\n\r\n    set alive(value: boolean) {\r\n        this._alive = value;\r\n    }\r\n\r\n    private _direction: Direction;\r\n\r\n    get direction(): Direction {\r\n        return this._direction;\r\n    }\r\n\r\n    set direction(value: Direction) {\r\n        if (this._snake.length > 1) {\r\n            if (value === Direction.Right && this._direction === Direction.Left) {\r\n                return;\r\n            }\r\n            if (value === Direction.Left && this._direction === Direction.Right) {\r\n                return;\r\n            }\r\n            if (value === Direction.Up && this._direction === Direction.Down) {\r\n                return;\r\n            }\r\n            if (value === Direction.Down && this._direction === Direction.Up) {\r\n                return;\r\n            }\r\n        }\r\n        this._nextDirection = value;\r\n    }\r\n\r\n    move(): void {\r\n        let direction = this._nextDirection != null ? this._nextDirection : this.direction;\r\n        let head = this._snake[0].clone();\r\n        switch (direction) {\r\n            case Direction.Left:\r\n                head.column = Util.mod(head.column - 1, this._columns);\r\n                break;\r\n            case Direction.Right:\r\n                head.column = Util.mod(head.column + 1, this._columns);\r\n                break;\r\n            case Direction.Up:\r\n                head.row = Util.mod(head.row - 1, this._rows);\r\n                break;\r\n            case Direction.Down:\r\n                head.row = Util.mod(head.row + 1, this._rows);\r\n                break;\r\n        }\r\n        if (!this._feed) {\r\n            this._snake.pop();\r\n        }\r\n        this._snake.unshift(head);\r\n        this._direction = direction;\r\n        this._nextDirection = null;\r\n        this._feed = false;\r\n    }\r\n\r\n    selfCheck(): Coords {\r\n        return Game.checkCollisions([this._snake[0]], this._snake.slice(1));\r\n    }\r\n\r\n    feed(): void {\r\n        this._feed = true;\r\n    }\r\n\r\n    clone(): Snake {\r\n        return new Snake(this._rows, this._columns, Util.cloneArray(this._snake), this._direction);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Snake.ts","import Coords from \"./Coords\";\r\nimport Util from \"./Util\";\r\n\r\nexport default class Field {\r\n    constructor(height: number, width: number, blocks: Array<Coords>) {\r\n        this._width = width;\r\n        this._height = height;\r\n        this._blocks = blocks;\r\n    }\r\n\r\n    private _width: number;\r\n\r\n    get width(): number {\r\n        return this._width;\r\n    }\r\n\r\n    private _height: number;\r\n\r\n    get height(): number {\r\n        return this._height;\r\n    }\r\n\r\n    private _blocks: Array<Coords>;\r\n\r\n    get blocks(): Array<Coords> {\r\n        return this._blocks;\r\n    }\r\n\r\n    clone(): Field {\r\n        return new Field(this._height, this._width, Util.cloneArray(this._blocks));\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Field.ts"],"sourceRoot":""}