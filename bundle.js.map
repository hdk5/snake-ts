{"version":3,"sources":["webpack:///webpack/bootstrap 572572dd1b3a8a8275b2","webpack:///./src/Direction.ts","webpack:///./src/Util.ts","webpack:///./src/Coords.ts","webpack:///./src/Game.ts","webpack:///./src/app.ts","webpack:///./src/CanvasHelper.ts","webpack:///./src/tilemap.ts","webpack:///./src/tilemap/food.png","webpack:///./src/tilemap/field_empty.png","webpack:///./src/tilemap/field_wall.png","webpack:///./src/tilemap/enemy_head.png","webpack:///./src/tilemap/enemy_tail.png","webpack:///./src/tilemap/enemy_straight.png","webpack:///./src/tilemap/enemy_rotate.png","webpack:///./src/tilemap/player_head.png","webpack:///./src/tilemap/player_tail.png","webpack:///./src/tilemap/player_straight.png","webpack:///./src/tilemap/player_rotate.png","webpack:///./src/AiHelper.ts","webpack:///./src/HtmlHelper.ts","webpack:///./src/GamePreset.ts","webpack:///./src/Snake.ts","webpack:///./src/Field.ts"],"names":["__webpack_require__","moduleId","installedModules","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Direction","id","this","Left","Right","Up","Down","Util","divident","divisor","arr","Math","floor","random","length","clone","_step","_iterator","Symbol","iterator","_iteratorNormalCompletion","next","done","obj","value","push","el","_step2","_iterator2","_iteratorNormalCompletion2","equals","Coords","row","column","_row","_column","Game","htmlRoot","_htmlHelper","_HtmlHelper2","default","_canvasHelper","_CanvasHelper2","gameInit","canvas","tabIndex","onkeydown","ev","keyCode","_this","_player","direction","_Direction2","console","log","gameOver","difficulty","init","gameProgress","_difficulty","_field","field","_snakes","_Util2","arrayClone","snakes","_food","createFood","_score","focus","cancelAnimationFrame","_frameId","_lastFrameTimeStamp","performance","now","requestAnimationFrame","animationLoop","bind","cells","height","j","width","_Coords2","cellLoop","_i","blocks","block","splice","snake","_step3","_iterator3","_iteratorNormalCompletion3","_block","choice","frameTimeStamp","gameScore","drawField","drawFood","drawSnake","SnakeType","Player","_step4","_iterator4","_enemies","_iteratorNormalCompletion4","enemy","Enemy","obstacles","apply","_toConsumableArray","_this2","_step6","_iterator6","filter","_iteratorNormalCompletion6","_enemy","slice","_AiHelper2","decide","checkCollisions","alive","move","feed","_step5","_iteratorNormalCompletion5","_iterator5","Infinity","root","self","other","CELL_SIZE","game","document","getElementById","window","CanvasHelper","_game","point","drawCell","_tilemap2","food","_canvas","_Game2","fieldEmpty","fieldWall","type","to","from","image","canvasX","canvasY","angle","head","reverse","PI","playerHead","tail","playerTail","body","mod","columns","rows","playerStraight","playerRotate","enemyHead","enemyRotate","enemyStraight","enemyTail","ctx","getContext","save","translate","rotate","drawImage","restore","Tilemap","Image","src","origin","destination","hashCoords","unhashCoords","r","getHeuristic","p1","p2","min","abs","getNeighbours","u","map","obstaclesH","includes","reconstructPath","currentH","path","destinationH","cameFrom","has","originH","closed","Set","open","add","Map","gScore","set","fScore","size","minF","f","undefined","pop","delete","neighboursH","neighbourH","currentG","neighbourG","tgScore","HtmlHelper","_htmlRoot","createElement","appendChild","createTextNode","_gameScore","_gameProgress","difficultyInput","max","fieldSelect","fieldOption","text","gameStart","onclick","Number","gamePreset","selectedIndex","_GamePreset2","Inf","Box","Grid","initGame","_gameInit","_finalScore","playAgain","_gameOver","lastChild","removeChild","innerHTML","String","score","GamePreset","_Field2","_Snake2","fieldBlocks","_height","_width","_fieldBlocks","_j","_field2","_snakes2","_height2","_width2","Snake","fieldHeight","fieldWidth","initial","_feed","_nextDirection","_snake","_alive","_rows","_columns","_direction","unshift","Field","_blocks"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 572572dd1b3a8a8275b2","class Direction {\r\n    public static Up = new Direction(\"Up\");\r\n    public static Down = new Direction(\"Down\");\r\n    public static Left = new Direction(\"Left\");\r\n    public static Right = new Direction(\"Right\");\r\n\r\n    constructor(private id: string) {\r\n    }\r\n\r\n    reverse(): Direction {\r\n        switch (this) {\r\n            case Direction.Left:\r\n                return Direction.Right;\r\n            case Direction.Right:\r\n                return Direction.Left;\r\n            case Direction.Up:\r\n                return Direction.Down;\r\n            case Direction.Down:\r\n                return Direction.Up;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Direction;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Direction.ts","export default class Util {\r\n    static mod(divident: number, divisor: number): number {\r\n        return ((divident % divisor) + divisor) % divisor;\r\n    };\r\n\r\n    static choice<T>(arr: Array<T>): T {\r\n        return arr[Math.floor(Math.random() * arr.length)] || null;\r\n    }\r\n\r\n    static arrayClone<T extends { clone: () => T }>(arr: Array<T>): Array<T> {\r\n        let clone: Array<T> = [];\r\n        for (let obj of arr) {\r\n            clone.push(obj.clone());\r\n        }\r\n        return clone;\r\n    }\r\n\r\n    static arrayContains<T extends { equals: (T) => boolean }>(arr: Array<T>, el: T): boolean {\r\n        for (let obj of arr) {\r\n            if (obj.equals(el))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Util.ts","export default class Coords {\r\n    constructor(row: number, column: number) {\r\n        this._row = row;\r\n        this._column = column;\r\n    }\r\n\r\n    private _row: number;\r\n\r\n    get row(): number {\r\n        return this._row;\r\n    }\r\n\r\n    set row(value: number) {\r\n        this._row = value;\r\n    }\r\n\r\n    private _column: number;\r\n\r\n    get column(): number {\r\n        return this._column;\r\n    }\r\n\r\n    set column(value: number) {\r\n        this._column = value;\r\n    }\r\n\r\n    clone(): Coords {\r\n        return new Coords(this._row, this._column)\r\n    }\r\n\r\n    equals(obj: Coords): boolean {\r\n        return this.row == obj.row && this.column == obj.column;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Coords.ts","import Snake from \"./Snake\";\r\nimport Coords from \"./Coords\";\r\nimport Direction from \"./Direction\";\r\nimport Field from \"./Field\";\r\nimport GamePreset from \"./GamePreset\";\r\nimport CanvasHelper from \"./CanvasHelper\";\r\nimport Util from \"./Util\";\r\nimport AiHelper from \"./AiHelper\";\r\nimport HtmlHelper from \"./HtmlHelper\";\r\n\r\nexport default class Game {\r\n    static readonly CELL_SIZE: number = 25;\r\n    private _lastFrameTimeStamp: number;\r\n    private _snakes: Array<Snake>;\r\n    private _field: Field;\r\n    private _food: Coords;\r\n    private _frameId: number;\r\n    private _canvasHelper: CanvasHelper;\r\n    private _htmlHelper: HtmlHelper;\r\n\r\n    constructor(htmlRoot: HTMLElement) {\r\n        this._htmlHelper = new HtmlHelper(this, htmlRoot);\r\n        this._canvasHelper = new CanvasHelper(this);\r\n        this._htmlHelper.gameInit();\r\n\r\n        this.canvas.tabIndex = 0;\r\n        this.canvas.onkeydown = ev => {\r\n            switch (ev.keyCode) {\r\n                case 37:\r\n                    this._player.direction = Direction.Left;\r\n                    break;\r\n                case 38:\r\n                    this._player.direction = Direction.Up;\r\n                    break;\r\n                case 39:\r\n                    this._player.direction = Direction.Right;\r\n                    break;\r\n                case 40:\r\n                    this._player.direction = Direction.Down;\r\n                    break;\r\n            }\r\n        };\r\n\r\n\r\n        console.log(\"Game object created.\");\r\n    }\r\n\r\n    private _score: number;\r\n\r\n    get score(): number {\r\n        return this._score;\r\n    }\r\n\r\n    get htmlRoot(): HTMLElement {\r\n        return this._htmlHelper.root;\r\n    }\r\n\r\n    private _difficulty: number;\r\n\r\n    get difficulty(): number {\r\n        return this._difficulty;\r\n    }\r\n\r\n    set difficulty(value: number) {\r\n        this._difficulty = value;\r\n    }\r\n\r\n    get canvas(): HTMLCanvasElement {\r\n        return this._htmlHelper.canvas;\r\n    };\r\n\r\n    private get _player(): Snake {\r\n        return this._snakes[0]\r\n    }\r\n\r\n    private get _enemies(): Array<Snake> {\r\n        return this._snakes.slice(1);\r\n    }\r\n\r\n    static checkCollisions(self: Array<Coords>, other: Array<Coords>): Coords {\r\n        for (let i = 0; i < self.length; ++i) {\r\n            for (let j = 0; j < other.length; ++j) {\r\n                if (self[i].equals(other[j])) {\r\n                    return self[i].clone();\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    gameOver() {\r\n        this._htmlHelper.gameOver();\r\n    }\r\n\r\n    initGame(difficulty: number, init: GamePreset) {\r\n        this._htmlHelper.gameProgress();\r\n        this._difficulty = difficulty;\r\n        this._field = init.field.clone();\r\n        this._snakes = Util.arrayClone(init.snakes);\r\n        this._food = this.createFood();\r\n        this._score = 0;\r\n\r\n        this.canvas.focus();\r\n\r\n        cancelAnimationFrame(this._frameId);\r\n        this._lastFrameTimeStamp = performance.now();\r\n        this._frameId = requestAnimationFrame(this.animationLoop.bind(this));\r\n    }\r\n\r\n    private createFood(): Coords {\r\n        let cells: Array<Coords> = [];\r\n        for (let i = 0; i < this._field.height; ++i) {\r\n            for (let j = 0; j < this._field.width; ++j) {\r\n                cells.push(new Coords(i, j));\r\n            }\r\n        }\r\n\r\n        cellLoop: for (let i = cells.length - 1; i >= 0; --i) {\r\n            for (let block of this._field.blocks) {\r\n                if (cells[i].equals(block)) {\r\n                    cells.splice(i, 1);\r\n                    continue cellLoop;\r\n                }\r\n            }\r\n\r\n            for (let snake of this._snakes) {\r\n                for (let block of snake.snake) {\r\n                    if (cells[i].equals(block)) {\r\n                        cells.splice(i, 1);\r\n                        continue cellLoop;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return Util.choice(cells);\r\n\r\n    }\r\n\r\n    private animationLoop(frameTimeStamp: number) {\r\n        if (frameTimeStamp - this._lastFrameTimeStamp < 1000 / this._difficulty) {\r\n            requestAnimationFrame(this.animationLoop.bind(this));\r\n            return;\r\n        }\r\n        this._lastFrameTimeStamp = frameTimeStamp;\r\n\r\n        this._htmlHelper.gameScore = this._score;\r\n\r\n        this._canvasHelper.drawField(this._field);\r\n        this._canvasHelper.drawFood(this._food);\r\n        this._canvasHelper.drawSnake(this._player, CanvasHelper.SnakeType.Player);\r\n        for (let enemy of this._enemies) {\r\n            this._canvasHelper.drawSnake(enemy, CanvasHelper.SnakeType.Enemy);\r\n        }\r\n\r\n        for (let snake of this._snakes.filter(value => value.alive)) {\r\n            let obstacles = [];\r\n            obstacles.push(...this._field.blocks);\r\n            for (let enemy of this._snakes.filter(value => value != snake)) {\r\n                obstacles.push(...enemy.snake);\r\n            }\r\n            obstacles.push(...snake.snake.slice(1));\r\n            if (snake != this._player) {\r\n                snake.direction = AiHelper.decide(snake.snake[0], this._food, obstacles, this._field.height, this._field.width);\r\n            }\r\n            let coords = Game.checkCollisions([snake.snake[0]], obstacles);\r\n            if (coords) {\r\n                snake.alive = false;\r\n                continue;\r\n            }\r\n            snake.move();\r\n            if (snake.snake[0].equals(this._food)) {\r\n                snake.feed();\r\n                this._food = this.createFood();\r\n                if (snake == this._player) {\r\n                    this._score += this._difficulty;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (c < Infinity) {\r\n            c++;\r\n            this._frameId = requestAnimationFrame(this.animationLoop.bind(this));\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nlet c = 0;\n\n\n// WEBPACK FOOTER //\n// ./src/Game.ts","// import tilemap from './tilemap'\r\n// import Direction from './Direction'\r\n// import Snake from './Snake'\r\n// import Coords from \"./Coords\"\r\n// import Field from \"./Field\"\r\nimport Game from \"./Game\"\r\n// import GamePreset from \"./GamePreset\";\r\n// import Util from \"./Util\";\r\n\r\n\r\n// (window as any).Snake = Snake;\r\n// (window as any).Field = Field;\r\n// (window as any).Coords = Coords;\r\n// (window as any).Game = Game;\r\n// (window as any).Direction = Direction;\r\n// (window as any).tilemap = tilemap;\r\n// (window as any).GamePreset = GamePreset;\r\n// (window as any).Util = Util;\r\n//\r\nlet game = new Game(document.getElementById(\"game_root\"));\r\n// game.initGame(GamePreset.Box);\r\n(window as any).game = game;\r\n\r\nconsole.log(\"Bundle loaded\");\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app.ts","import Snake from \"./Snake\";\r\nimport Direction from \"./Direction\";\r\nimport Game from \"./Game\";\r\nimport Coords from \"./Coords\";\r\nimport Util from \"./Util\";\r\nimport tilemap from \"./tilemap\";\r\nimport Field from \"./Field\";\r\n\r\nenum SnakeType { Player, Enemy }\r\n\r\nexport default class CanvasHelper {\r\n    static SnakeType = SnakeType;\r\n    private _game: Game;\r\n\r\n    constructor(game: Game) {\r\n        this._game = game;\r\n    }\r\n\r\n    private get _canvas() {\r\n        return this._game.canvas;\r\n    }\r\n\r\n    drawFood(point: Coords): void {\r\n        this.drawCell(tilemap.food, point.column, point.row, 0);\r\n    }\r\n\r\n    drawField(field: Field): void {\r\n        this._canvas.width = field.width * Game.CELL_SIZE;\r\n        this._canvas.height = field.height * Game.CELL_SIZE;\r\n        for (let i = 0; i < field.width; ++i) {\r\n            for (let j = 0; j < field.height; ++j) {\r\n                this.drawCell(tilemap.fieldEmpty, i, j, 0);\r\n            }\r\n        }\r\n        for (let block of field.blocks) {\r\n            this.drawCell(tilemap.fieldWall, block.column, block.row, 0);\r\n        }\r\n    }\r\n\r\n    drawSnake(snake: Snake, type: SnakeType): void {\r\n        let to: Direction, from: Direction;\r\n\r\n        for (let i = 0; i < snake.snake.length; ++i) {\r\n            let image: HTMLImageElement, canvasX, canvasY, angle;\r\n            if (i == 0) {\r\n                let head = snake.snake[i];\r\n                from = snake.direction.reverse();\r\n                switch (from) {\r\n                    case Direction.Down:\r\n                        angle = 0;\r\n                        break;\r\n                    case Direction.Left:\r\n                        angle = Math.PI / 2;\r\n                        break;\r\n                    case Direction.Up:\r\n                        angle = Math.PI;\r\n                        break;\r\n                    case Direction.Right:\r\n                        angle = Math.PI * 3 / 2;\r\n                        break;\r\n                }\r\n                image = tilemap.playerHead;\r\n\r\n                canvasX = head.column;\r\n                canvasY = head.row;\r\n            } else if (i == snake.snake.length - 1) {\r\n                let tail = snake.snake[i];\r\n                to = from.reverse();\r\n                switch (to) {\r\n                    case Direction.Up:\r\n                        angle = 0;\r\n                        break;\r\n                    case Direction.Right:\r\n                        angle = Math.PI / 2;\r\n                        break;\r\n                    case Direction.Down:\r\n                        angle = Math.PI;\r\n                        break;\r\n                    case Direction.Left:\r\n                        angle = Math.PI * 3 / 2;\r\n                        break;\r\n                }\r\n                image = tilemap.playerTail;\r\n\r\n                canvasX = tail.column;\r\n                canvasY = tail.row;\r\n            } else {\r\n                to = from.reverse();\r\n                let body = snake.snake[i];\r\n                let next = snake.snake[i + 1];\r\n                if (body.row == next.row) {\r\n                    if (Util.mod(body.column + 1, snake.columns) == next.column) {\r\n                        from = Direction.Right;\r\n                    } else if (Util.mod(body.column - 1, snake.columns) == next.column) {\r\n                        from = Direction.Left;\r\n                    }\r\n                } else if (body.column == next.column) {\r\n                    if (Util.mod(body.row + 1, snake.rows) == next.row) {\r\n                        from = Direction.Down;\r\n                    } else if (Util.mod(body.row - 1, snake.rows) == next.row) {\r\n                        from = Direction.Up;\r\n                    }\r\n                }\r\n                if ((from == Direction.Left && to == Direction.Right)\r\n                    || (from == Direction.Right && to == Direction.Left)) {\r\n                    image = tilemap.playerStraight;\r\n                    angle = Math.PI / 2;\r\n                } else if ((from == Direction.Up && to == Direction.Down)\r\n                    || (from == Direction.Down && to == Direction.Up)) {\r\n                    image = tilemap.playerStraight;\r\n                    angle = 0;\r\n                } else if ((from == Direction.Up && to == Direction.Right)\r\n                    || (from == Direction.Right && to == Direction.Up)) {\r\n                    image = tilemap.playerRotate;\r\n                    angle = 0;\r\n                } else if ((from == Direction.Right && to == Direction.Down)\r\n                    || (from == Direction.Down && to == Direction.Right)) {\r\n                    image = tilemap.playerRotate;\r\n                    angle = Math.PI / 2;\r\n                }\r\n                else if ((from == Direction.Down && to == Direction.Left)\r\n                    || (from == Direction.Left && to == Direction.Down)) {\r\n                    image = tilemap.playerRotate;\r\n                    angle = Math.PI;\r\n                }\r\n                else if ((from == Direction.Left && to == Direction.Up)\r\n                    || (from == Direction.Up && to == Direction.Left)) {\r\n                    image = tilemap.playerRotate;\r\n                    angle = Math.PI * 3 / 2;\r\n                }\r\n\r\n\r\n                canvasX = body.column;\r\n                canvasY = body.row;\r\n            }\r\n            // }\r\n\r\n            switch (image) {\r\n                case tilemap.playerHead:\r\n                    switch (type) {\r\n                        case SnakeType.Player:\r\n                            image = tilemap.playerHead;\r\n                            break;\r\n                        case SnakeType.Enemy:\r\n                            image = tilemap.enemyHead;\r\n                            break\r\n                    }\r\n                    break;\r\n                case tilemap.playerRotate:\r\n                    switch (type) {\r\n                        case SnakeType.Player:\r\n                            image = tilemap.playerRotate;\r\n                            break;\r\n                        case SnakeType.Enemy:\r\n                            image = tilemap.enemyRotate;\r\n                            break\r\n                    }\r\n                    break;\r\n                case tilemap.playerStraight:\r\n                    switch (type) {\r\n                        case SnakeType.Player:\r\n                            image = tilemap.playerStraight;\r\n                            break;\r\n                        case SnakeType.Enemy:\r\n                            image = tilemap.enemyStraight;\r\n                            break\r\n                    }\r\n                    break;\r\n                case tilemap.playerTail:\r\n                    switch (type) {\r\n                        case SnakeType.Player:\r\n                            image = tilemap.playerTail;\r\n                            break;\r\n                        case SnakeType.Enemy:\r\n                            image = tilemap.enemyTail;\r\n                            break\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            this.drawCell(image, canvasX, canvasY, angle);\r\n        }\r\n\r\n    };\r\n\r\n    drawCell(image: HTMLImageElement, canvasX: number, canvasY: number, angle: number): void {\r\n        let ctx: CanvasRenderingContext2D = this._canvas.getContext('2d');\r\n        ctx.save();\r\n        ctx.translate(canvasX * Game.CELL_SIZE, canvasY * Game.CELL_SIZE);\r\n        ctx.translate(Game.CELL_SIZE / 2, Game.CELL_SIZE / 2);\r\n        ctx.rotate(angle);\r\n        ctx.drawImage(\r\n            image,\r\n            -Game.CELL_SIZE / 2, -Game.CELL_SIZE / 2, Game.CELL_SIZE, Game.CELL_SIZE\r\n        );\r\n        ctx.restore();\r\n\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/CanvasHelper.ts","declare function require(path: string): any;\r\n\r\n/*\r\nnamespace tilemap {\r\n    export const food: HTMLImageElement = new Image();\r\n    // food.onload = () => console.log(food);\r\n    food.src = require(\"./tilemap/food.png\");\r\n\r\n    export const fieldEmpty: HTMLImageElement = new Image();\r\n    // fieldEmpty.onload = () => console.log(fieldEmpty);\r\n    fieldEmpty.src = require(\"./tilemap/field_empty.png\");\r\n\r\n    export const fieldWall: HTMLImageElement = new Image();\r\n    // fieldWall.onload = () => console.log(fieldWall);\r\n    fieldWall.src = require(\"./tilemap/field_wall.png\");\r\n\r\n    export const enemyHead: HTMLImageElement = new Image();\r\n    // enemyHead.onload = () => console.log(enemyHead);\r\n    enemyHead.src = require(\"./tilemap/enemy_head.png\");\r\n\r\n    export const enemyTail: HTMLImageElement = new Image();\r\n    // enemyTail.onload = () => console.log(enemyTail);\r\n    enemyTail.src = require(\"./tilemap/enemy_tail.png\");\r\n\r\n    export const enemyStraight: HTMLImageElement = new Image();\r\n    // enemyStraight.onload = () => console.log(enemyStraight);\r\n    enemyStraight.src = require(\"./tilemap/enemy_straight.png\");\r\n\r\n    export const enemyRotate: HTMLImageElement = new Image();\r\n    // enemyRotate.onload = () => console.log(enemyRotate);\r\n    enemyRotate.src = require(\"./tilemap/enemy_rotate.png\");\r\n\r\n    export const playerHead: HTMLImageElement = new Image();\r\n    // playerHead.onload = () => console.log(playerHead);\r\n    playerHead.src = require(\"./tilemap/player_head.png\");\r\n\r\n    export const playerTail: HTMLImageElement = new Image();\r\n    // playerTail.onload = () => console.log(playerTail);\r\n    playerTail.src = require(\"./tilemap/player_tail.png\");\r\n\r\n    export const playerStraight: HTMLImageElement = new Image();\r\n    // playerStraight.onload = () => console.log(playerStraight);\r\n    playerStraight.src = require(\"./tilemap/player_straight.png\");\r\n\r\n    export const playerRotate: HTMLImageElement = new Image();\r\n    // playerRotate.onload = () => console.log(playerRotate);\r\n    playerRotate.src = require(\"./tilemap/player_rotate.png\");\r\n\r\n}\r\n*/\r\n\r\nclass Tilemap {\r\n    static food: HTMLImageElement = new Image();\r\n    static fieldEmpty: HTMLImageElement = new Image();\r\n    static fieldWall: HTMLImageElement = new Image();\r\n    static enemyHead: HTMLImageElement = new Image();\r\n    static enemyTail: HTMLImageElement = new Image();\r\n    static enemyStraight: HTMLImageElement = new Image();\r\n    static enemyRotate: HTMLImageElement = new Image();\r\n    static playerHead: HTMLImageElement = new Image();\r\n    static playerTail: HTMLImageElement = new Image();\r\n    static playerStraight: HTMLImageElement = new Image();\r\n    static playerRotate: HTMLImageElement = new Image();\r\n}\r\n\r\nTilemap.food.src = require(\"./tilemap/food.png\");\r\nTilemap.fieldEmpty.src = require(\"./tilemap/field_empty.png\");\r\nTilemap.fieldWall.src = require(\"./tilemap/field_wall.png\");\r\nTilemap.enemyHead.src = require(\"./tilemap/enemy_head.png\");\r\nTilemap.enemyTail.src = require(\"./tilemap/enemy_tail.png\");\r\nTilemap.enemyStraight.src = require(\"./tilemap/enemy_straight.png\");\r\nTilemap.enemyRotate.src = require(\"./tilemap/enemy_rotate.png\");\r\nTilemap.playerHead.src = require(\"./tilemap/player_head.png\");\r\nTilemap.playerTail.src = require(\"./tilemap/player_tail.png\");\r\nTilemap.playerStraight.src = require(\"./tilemap/player_straight.png\");\r\nTilemap.playerRotate.src = require(\"./tilemap/player_rotate.png\");\r\n\r\nexport default Tilemap\n\n\n// WEBPACK FOOTER //\n// ./src/tilemap.ts","module.exports = \"data:image/png;charset=utf-8;base64,iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTnU1rJkAAAAW0lEQVRIS+3NSwoAIAxDwV7F+x9SEQyIRPw1G+nAg65SC2FPTrldIvUBkugfSB6xB8gFGx57wgZnXWFDq46wgd2OsIFVV9jQrCdscMwFG0au5A9A/gDkD8InzArfwu+wergE2QAAAABJRU5ErkJggg==\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/tilemap/food.png\n// module id = 8\n// module chunks = 0","module.exports = \"data:image/png;charset=utf-8;base64,iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAIAAABLixI0AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwQAADsEBuJFr7QAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xOdTWsmQAAAApSURBVEhLY6AyaKAGGDWLNDBqFmlg1CzSwKhZpIFRs0gDg9ws6gAGBgBU+xmuCMgmOQAAAABJRU5ErkJggg==\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/tilemap/field_empty.png\n// module id = 9\n// module chunks = 0","module.exports = \"data:image/png;charset=utf-8;base64,iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAIAAABLixI0AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwQAADsEBuJFr7QAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xOdTWsmQAAAAmSURBVEhLY3CgHhg1izQwahZpYNQs0sCoWaSBUbNIA6NmkQIcHADt0dTQuDtR2wAAAABJRU5ErkJggg==\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/tilemap/field_wall.png\n// module id = 10\n// module chunks = 0","module.exports = \"data:image/png;charset=utf-8;base64,iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xOdTWsmQAAABzSURBVEhL7cxBCsAgDERRT9P739CW0gGx32asWfrgbwKZsm3fjlpfpaHxviU0OOoXGoqa1jxLdHs+Te3jlUS3O1v/OJONnt1s9Oxmo2e3KTQQNY1Gon6hoVFLaLAvBQ2rNDSu0tC4SkPjKg2NqzQ0rkKlnP3K2OjUhp90AAAAAElFTkSuQmCC\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/tilemap/enemy_head.png\n// module id = 11\n// module chunks = 0","module.exports = \"data:image/png;charset=utf-8;base64,iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xOdTWsmQAAABTSURBVEhL7c2hDcBAEMTAryb9d/hBZo4U4GM3kunu+eW597OMjVPGxilj45SxccrYOGVsnDI2Thkbp4yNU8bGKWPjlLFxytg4pcYPMH6w1hp0zgvIjuLpVy41MAAAAABJRU5ErkJggg==\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/tilemap/enemy_tail.png\n// module id = 12\n// module chunks = 0","module.exports = \"data:image/png;charset=utf-8;base64,iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xOdTWsmQAAABkSURBVEhLrcyxDQAgEIDAn8b9N9SKDqMFl9AyX9be1zI2p4zNKWNzyticMjanjM0pY3PK2JwyNqeMzSljc8rYnDI2p4zNKWNzyticMjanjM0pY3PK2JwyNqeMzSljc8rYnJ5mDpa4dqwbqZseAAAAAElFTkSuQmCC\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/tilemap/enemy_straight.png\n// module id = 13\n// module chunks = 0","module.exports = \"data:image/png;charset=utf-8;base64,iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xOdTWsmQAAABaSURBVEhL7cyxCcBAEAPBq8b9d/iOBA72QQIFDm5gQ2kszznXauhc1dC5qqFzVUPnqobOVQ2dqxo6VzV0/q2CjpMsNEyy0DDJQsMkCw2TbDR2i9CB01rrD2ZeG1xyZF3A6dwAAAAASUVORK5CYII=\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/tilemap/enemy_rotate.png\n// module id = 14\n// module chunks = 0","module.exports = \"data:image/png;charset=utf-8;base64,iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTnU1rJkAAAAiElEQVRIS+2MQQqFQAzF5v6XVvlE6A8ybe3WYDZjX9bHx5bj+iy/5jj8JKfvcGwnkx6OVGRa5y9wk7wxrRGHP2+yt0sSOR52JJHjYUcSOR52JJHjYUcSNTyuyLSOAxWZ9nBkJ5N3OPYkpzMcjXIyx+EoJ3McjnIyx+EoJ3McjnIyx+EoJxvWOgExoLpUIABYmgAAAABJRU5ErkJggg==\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/tilemap/player_head.png\n// module id = 15\n// module chunks = 0","module.exports = \"data:image/png;charset=utf-8;base64,iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTnU1rJkAAAAaUlEQVRIS+2NOQrAMBDE9v+fzgEqBkEgMHZnYVUrxvOH63lfkvR4OCXp8XBK0uPhlKTHwylJj4dTkh4PpyQ9Hk5JejyckvR4OCXp8XBK0uPhlKTHwylJj4dTkjV4/JXTWrZ/cDgcdjJzA4EB0y3M9rbXAAAAAElFTkSuQmCC\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/tilemap/player_tail.png\n// module id = 16\n// module chunks = 0","module.exports = \"data:image/png;charset=utf-8;base64,iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTnU1rJkAAAAhElEQVRIS6WMMQrAQACD7v+fbjs4iNBSiMRNcv5wPXuTZKfHlmSnx5Zkp8eWZKfHlmSnx5Zkp8eWZKfHlmSnx5Zkp8eWZKfHlmSnx5Zkp8eWZKfHlmSnx5Zkp8eWZKfHlmSnx5Zkp8eWZKfHlmSnx5Zkp8eWZKfHlmSnx5Zkp8eW5INzbsODXLJd/56nAAAAAElFTkSuQmCC\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/tilemap/player_straight.png\n// module id = 17\n// module chunks = 0","module.exports = \"data:image/png;charset=utf-8;base64,iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTnU1rJkAAAAbUlEQVRIS+2MMQ6AMAzE+v9PA4OHyBKh0Q0steLt4rXD9dybTHIcrjLJcbjKJMfhKpMch6tMchyuMslxuMokx+EqkxyHLbMMR6eS6fHTVDI9fppKpsdPU8n0+GkqmW/8OJHEHn7elffD4fAva92z41i2DcwJlgAAAABJRU5ErkJggg==\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/tilemap/player_rotate.png\n// module id = 18\n// module chunks = 0","import Direction from \"./Direction\";\r\nimport Coords from \"./Coords\";\r\nimport Util from \"./Util\";\r\n\r\nexport default class {\r\n    static decide(origin: Coords, destination: Coords, obstacles: Array<Coords>, height: number, width: number): Direction {\r\n        let hashCoords: (p: Coords) => number = (p) => {\r\n            return (p.row * width + p.column);\r\n        };\r\n\r\n        let unhashCoords: (p: number) => Coords = (p) => {\r\n            let r = (p / width | 0);\r\n            let c = p % width;\r\n            return new Coords(r, c);\r\n        };\r\n\r\n        let getHeuristic: (p1: Coords, p2: Coords) => number = (p1, p2) => {\r\n            let r = Math.min(\r\n                Math.abs(p1.row - p2.row),\r\n                // Infinity\r\n                height - Math.abs(p1.row - p2.row)\r\n                // Math.min(p1.row, p2.row) + height - Math.max(p1.row, p2.row)\r\n            );\r\n            let c = Math.min(\r\n                Math.abs(p1.column - p2.column),\r\n                // Infinity\r\n                width - Math.abs(p1.column - p2.column)\r\n                // Math.min(p1.column, p2.column) + width - Math.max(p1.column, p2.column)\r\n            );\r\n            return r + c;\r\n            // return 0;\r\n        };\r\n\r\n        let getNeighbours: (p: Coords) => Array<number> = (p) => {\r\n            let u = p.clone();\r\n            u.row = Util.mod(u.row - 1, height);\r\n            let d = p.clone();\r\n            d.row = Util.mod(d.row + 1, height);\r\n            let l = p.clone();\r\n            l.column = Util.mod(l.column - 1, width);\r\n            let r = p.clone();\r\n            r.column = Util.mod(r.column + 1, width);\r\n\r\n            let n = [u, d, l, r];\r\n\r\n            return n\r\n                .map(value => hashCoords(value))\r\n                .filter(value => !obstaclesH.includes(value));\r\n        };\r\n\r\n        let reconstructPath: (currentH: number) => Array<number> = (currentH: number) => {\r\n            let path: Array<number> = [];\r\n            path.push(destinationH);\r\n            while (cameFrom.has(currentH)) {\r\n                currentH = cameFrom.get(currentH);\r\n                path.push(currentH);\r\n            }\r\n            return path;\r\n        };\r\n\r\n        let originH = hashCoords(origin);\r\n        let destinationH = hashCoords(destination);\r\n        let obstaclesH: Array<number> = obstacles\r\n            .map(value => hashCoords(value))\r\n            .filter(value => value != originH && value != destinationH);\r\n\r\n        let closed: Set<number> = new Set<number>();\r\n        let open: Set<number> = new Set<number>();\r\n        open.add(originH);\r\n\r\n        let cameFrom: Map<number, number> = new Map<number, number>();\r\n\r\n        let gScore: Map<number, number> = new Map<number, number>();\r\n        gScore.set(originH, 0);\r\n\r\n        let fScore: Map<number, number> = new Map<number, number>();\r\n        fScore.set(originH, getHeuristic(origin, destination));\r\n\r\n        while (open.size > 0) {\r\n            let currentH: number;\r\n            {\r\n                let minF = Infinity;\r\n\r\n                for (let o of open) {\r\n                    let f = fScore.get(o);\r\n                    if (f == undefined) {\r\n                        f = Infinity;\r\n                    }\r\n                    if (f <= minF) {\r\n                        currentH = o;\r\n                        minF = f;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentH == destinationH) {\r\n                let path: Array<number> = reconstructPath(currentH);\r\n                // console.log(path);\r\n                // console.log(path.map(unhashCoords));\r\n\r\n                let from: Coords = unhashCoords(path.pop());\r\n                let to: Coords = unhashCoords(path.pop());\r\n\r\n                if (from.row == to.row) {\r\n                    if (Util.mod(from.column + 1, width) == to.column) {\r\n                        return Direction.Right;\r\n                    } else if (Util.mod(from.column - 1, width) == to.column) {\r\n                        return Direction.Left;\r\n                    }\r\n                } else if (from.column == to.column) {\r\n                    if (Util.mod(from.row + 1, height) == to.row) {\r\n                        return Direction.Down;\r\n                    } else if (Util.mod(from.row - 1, height) == to.row) {\r\n                        return Direction.Up;\r\n                    }\r\n                }\r\n\r\n                return null;\r\n            }\r\n\r\n            open.delete(currentH);\r\n            closed.add(currentH);\r\n\r\n            let neighboursH: Array<number> = getNeighbours(unhashCoords(currentH));\r\n            for (let neighbourH of neighboursH) {\r\n                if (closed.has(neighbourH)) {\r\n                    continue;\r\n                }\r\n\r\n                open.add(neighbourH);\r\n\r\n                let currentG = gScore.get(currentH);\r\n                if (currentG == undefined) {\r\n                    currentG = Infinity\r\n                }\r\n                let neighbourG = gScore.get(neighbourH);\r\n                if (neighbourH == undefined) {\r\n                    neighbourH = Infinity\r\n                }\r\n\r\n                let tgScore = currentG + 1;\r\n                if (tgScore >= neighbourG) {\r\n                    continue;\r\n                }\r\n\r\n                cameFrom.set(neighbourH, currentH);\r\n                gScore.set(neighbourH, tgScore);\r\n                fScore.set(neighbourH, tgScore + getHeuristic(unhashCoords(neighbourH), destination));\r\n            }\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AiHelper.ts","import Game from \"./Game\";\r\nimport GamePreset from \"./GamePreset\";\r\n\r\nexport default class HtmlHelper {\r\n    private _game: Game;\r\n    private _htmlRoot: HTMLElement;\r\n    private _gameInit: HTMLDivElement;\r\n    private _gameProgress: HTMLDivElement;\r\n    private _gameOver: HTMLDivElement;\r\n    private _finalScore: HTMLSpanElement;\r\n\r\n    constructor(game: Game, htmlRoot: HTMLElement) {\r\n        this._game = game;\r\n        this._htmlRoot = htmlRoot;\r\n\r\n        let gameProgress: HTMLDivElement = document.createElement(\"div\");\r\n        {\r\n            let canvas = document.createElement(\"canvas\");\r\n            gameProgress.appendChild(canvas);\r\n            gameProgress.appendChild(document.createElement(\"br\"));\r\n\r\n            gameProgress.appendChild(document.createTextNode(\"Score: \"));\r\n            let gameScore = document.createElement(\"span\");\r\n            gameProgress.appendChild(gameScore);\r\n\r\n            this._gameScore = gameScore;\r\n            this._canvas = canvas;\r\n        }\r\n        this._gameProgress = gameProgress;\r\n\r\n        let gameInit: HTMLDivElement = document.createElement(\"div\");\r\n        {\r\n            let difficultyInput = document.createElement(\"input\");\r\n            {\r\n                difficultyInput.type = \"number\";\r\n                difficultyInput.min = \"1\";\r\n                difficultyInput.max = \"60\";\r\n                difficultyInput.value = \"10\";\r\n            }\r\n            gameInit.appendChild(document.createTextNode(\"Difficulty: \"));\r\n            gameInit.appendChild(difficultyInput);\r\n            gameInit.appendChild(document.createElement(\"br\"));\r\n\r\n            let fieldSelect = document.createElement(\"select\");\r\n            let fieldOption: HTMLOptionElement;\r\n\r\n            fieldOption = document.createElement(\"option\");\r\n            fieldOption.text = \"Infinite field\";\r\n            fieldSelect.add(fieldOption);\r\n\r\n            fieldOption = document.createElement(\"option\");\r\n            fieldOption.text = \"Box\";\r\n            fieldSelect.add(fieldOption);\r\n\r\n            fieldOption = document.createElement(\"option\");\r\n            fieldOption.text = \"Grid\";\r\n            fieldSelect.add(fieldOption);\r\n\r\n            gameInit.appendChild(document.createTextNode(\"Field: \"));\r\n            gameInit.appendChild(fieldSelect);\r\n            gameInit.appendChild(document.createElement(\"br\"));\r\n\r\n            let gameStart = document.createElement(\"button\");\r\n            {\r\n                gameStart.appendChild(document.createTextNode(\"Start\"));\r\n                gameStart.onclick = () => {\r\n                    let difficulty: number = Number(difficultyInput.value);\r\n                    let gamePreset;\r\n                    switch (fieldSelect.selectedIndex) {\r\n                        case 0:\r\n                            gamePreset = GamePreset.Inf;\r\n                            break;\r\n                        case 1:\r\n                            gamePreset = GamePreset.Box;\r\n                            break;\r\n                        case 2:\r\n                            gamePreset = GamePreset.Grid;\r\n                            break;\r\n\r\n                    }\r\n                    return game.initGame(difficulty, gamePreset);\r\n                };\r\n            }\r\n            gameInit.appendChild(gameStart);\r\n        }\r\n        this._gameInit = gameInit;\r\n\r\n        let gameOver: HTMLDivElement = document.createElement(\"div\");\r\n        {\r\n            gameOver.appendChild(document.createTextNode(\"You scored \"));\r\n            this._finalScore = document.createElement(\"span\");\r\n            gameOver.appendChild(this._finalScore);\r\n            gameOver.appendChild(document.createElement(\"br\"));\r\n\r\n            let playAgain: HTMLButtonElement = document.createElement(\"button\");\r\n            {\r\n                playAgain.appendChild(document.createTextNode(\"Play again\"));\r\n                playAgain.onclick = () => this.gameInit();\r\n            }\r\n\r\n            gameOver.appendChild(playAgain);\r\n        }\r\n        this._gameOver = gameOver;\r\n    }\r\n\r\n    private _gameScore: HTMLSpanElement;\r\n\r\n    set gameScore(value: number) {\r\n        this._gameScore.innerHTML = String(value);\r\n    }\r\n\r\n    get root(): HTMLElement {\r\n        return this._htmlRoot;\r\n    }\r\n\r\n    private _canvas: HTMLCanvasElement;\r\n\r\n    get canvas(): HTMLCanvasElement {\r\n        return this._canvas;\r\n    }\r\n\r\n    gameInit(): void {\r\n        while (this._htmlRoot.lastChild) {\r\n            this._htmlRoot.removeChild(this._htmlRoot.lastChild)\r\n        }\r\n        this._htmlRoot.appendChild(this._gameInit)\r\n    }\r\n\r\n    gameProgress(): void {\r\n        while (this._htmlRoot.lastChild) {\r\n            this._htmlRoot.removeChild(this._htmlRoot.lastChild)\r\n        }\r\n        this._htmlRoot.appendChild(this._gameProgress)\r\n    }\r\n\r\n    gameOver(): void {\r\n        while (this._htmlRoot.lastChild) {\r\n            this._htmlRoot.removeChild(this._htmlRoot.lastChild)\r\n        }\r\n        this._finalScore.innerHTML = String(this._game.score);\r\n        this._htmlRoot.appendChild(this._gameOver)\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/HtmlHelper.ts","import Snake from \"./Snake\";\r\nimport Field from \"./Field\";\r\nimport Coords from \"./Coords\";\r\nimport Direction from \"./Direction\";\r\n\r\nexport default class GamePreset {\r\n\r\n    static Inf: GamePreset;\r\n    static Box: GamePreset;\r\n    static Grid: GamePreset;\r\n\r\n    constructor(snakes: Array<Snake>, field: Field) {\r\n        this._snakes = snakes;\r\n        this._field = field;\r\n    }\r\n\r\n    private _snakes: Array<Snake>;\r\n\r\n    get snakes(): Array<Snake> {\r\n        return this._snakes;\r\n    }\r\n\r\n    private _field: Field;\r\n\r\n    get field(): Field {\r\n        return this._field;\r\n    }\r\n\r\n}\r\n\r\n{\r\n    let height = 24;\r\n    let width = 30;\r\n    let field = new Field(height, width, []);\r\n    let player = new Snake(height, width, [new Coords(0, 2), new Coords(0, 1), new Coords(0, 0)], Direction.Right);\r\n    let enemyBL = new Snake(height, width, [new Coords(height - 3, 0), new Coords(height - 2, 0), new Coords(height-1, 0)], Direction.Up);\r\n    let enemyTR = new Snake(height, width, [new Coords(2, width - 1), new Coords(1, width - 1), new Coords(0, width - 1)], Direction.Down);\r\n    let enemyBR = new Snake(height, width, [new Coords(height - 1, width - 3), new Coords(height - 1, width - 2), new Coords(height - 1, width - 1)], Direction.Left);\r\n    let snakes = [player, enemyBL, enemyTR, enemyBR];\r\n    GamePreset.Inf = new GamePreset(snakes, field);\r\n}\r\n\r\n{\r\n    let height = 24;\r\n    let width = 30;\r\n    let fieldBlocks = [];\r\n    for (let i = 0; i < height; ++i) {\r\n        for (let j = 0; j < width; ++j) {\r\n            if (i == 0 || j == 0 || i == height - 1 || j == width - 1) {\r\n                fieldBlocks.push(new Coords(i, j));\r\n            }\r\n        }\r\n    }\r\n    let field = new Field(height, width, fieldBlocks);\r\n    let player = new Snake(height, width, [new Coords(2, 4), new Coords(2, 3), new Coords(2, 2)], Direction.Right);\r\n    let enemyBL = new Snake(height, width, [new Coords(height - 5, 2), new Coords(height - 4, 2), new Coords(height - 3, 2)], Direction.Up);\r\n    let enemyTR = new Snake(height, width, [new Coords(4, width - 3), new Coords(3, width - 3), new Coords(2, width - 3)], Direction.Down);\r\n    let enemyBR = new Snake(height, width, [new Coords(height - 3, width - 5), new Coords(height - 3, width - 4), new Coords(height - 3, width - 3)], Direction.Left);\r\n    let snakes = [player, enemyBL, enemyTR, enemyBR];\r\n    GamePreset.Box = new GamePreset(snakes, field);\r\n}\r\n\r\n{\r\n    let height = 24;\r\n    let width = 30;\r\n    let fieldBlocks = [];\r\n    for (let i = 0; i < height; i += 2) {\r\n        for (let j = 0; j < width; j += 2) {\r\n            fieldBlocks.push(new Coords(i, j));\r\n        }\r\n    }\r\n\r\n    let field = new Field(height, width, fieldBlocks);\r\n    let player = new Snake(height, width, [new Coords(1, 3), new Coords(1, 2), new Coords(1, 1)], Direction.Right);\r\n    let enemyBL = new Snake(height, width, [new Coords(height - 3, 1), new Coords(height - 2, 1), new Coords(height - 1, 1)], Direction.Up);\r\n    let enemyTR = new Snake(height, width, [new Coords(3, width - 1), new Coords(2, width - 1), new Coords(1, width - 1)], Direction.Down);\r\n    let enemyBR = new Snake(height, width, [new Coords(height - 1, width - 3), new Coords(height - 1, width - 2), new Coords(height - 1, width - 1)], Direction.Left);\r\n    let snakes = [player, enemyBL, enemyTR, enemyBR];\r\n    GamePreset.Grid = new GamePreset(snakes, field);\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/GamePreset.ts","import Direction from \"./Direction\"\r\nimport Coords from \"./Coords\";\r\nimport Game from \"./Game\";\r\nimport Util from \"./Util\";\r\n\r\nexport default class Snake {\r\n    private _feed: boolean = false;\r\n    private _nextDirection: Direction = null;\r\n\r\n    constructor(fieldHeight: number, fieldWidth: number, initial: Array<Coords>, direction: Direction) {\r\n        this._rows = fieldHeight;\r\n        this._columns = fieldWidth;\r\n        this._direction = direction;\r\n        this._snake = initial;\r\n    }\r\n\r\n    private _rows: number;\r\n\r\n    get rows(): number {\r\n        return this._rows;\r\n    }\r\n\r\n    private _columns: number;\r\n\r\n    get columns(): number {\r\n        return this._columns;\r\n    }\r\n\r\n    private _snake: Array<Coords> = [];\r\n\r\n    get snake(): Array<Coords> {\r\n        return this._snake;\r\n    }\r\n\r\n    private _alive: boolean = true;\r\n\r\n    get alive(): boolean {\r\n        return this._alive;\r\n    }\r\n\r\n    set alive(value: boolean) {\r\n        this._alive = value;\r\n    }\r\n\r\n    private _direction: Direction;\r\n\r\n    get direction(): Direction {\r\n        return this._direction;\r\n    }\r\n\r\n    set direction(value: Direction) {\r\n        if (this._snake.length > 1) {\r\n            if (value === Direction.Right && this._direction === Direction.Left) {\r\n                return;\r\n            }\r\n            if (value === Direction.Left && this._direction === Direction.Right) {\r\n                return;\r\n            }\r\n            if (value === Direction.Up && this._direction === Direction.Down) {\r\n                return;\r\n            }\r\n            if (value === Direction.Down && this._direction === Direction.Up) {\r\n                return;\r\n            }\r\n        }\r\n        this._nextDirection = value;\r\n    }\r\n\r\n    move(): void {\r\n        let direction = this._nextDirection != null ? this._nextDirection : this.direction;\r\n        let head = this._snake[0].clone();\r\n        switch (direction) {\r\n            case Direction.Left:\r\n                head.column = Util.mod(head.column - 1, this._columns);\r\n                break;\r\n            case Direction.Right:\r\n                head.column = Util.mod(head.column + 1, this._columns);\r\n                break;\r\n            case Direction.Up:\r\n                head.row = Util.mod(head.row - 1, this._rows);\r\n                break;\r\n            case Direction.Down:\r\n                head.row = Util.mod(head.row + 1, this._rows);\r\n                break;\r\n        }\r\n        if (!this._feed) {\r\n            this._snake.pop();\r\n        }\r\n        this._snake.unshift(head);\r\n        this._direction = direction;\r\n        this._nextDirection = null;\r\n        this._feed = false;\r\n    }\r\n\r\n    feed(): void {\r\n        this._feed = true;\r\n    }\r\n\r\n    clone(): Snake {\r\n        return new Snake(this._rows, this._columns, Util.arrayClone(this._snake), this._direction);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Snake.ts","import Coords from \"./Coords\";\r\nimport Util from \"./Util\";\r\n\r\nexport default class Field {\r\n    constructor(height: number, width: number, blocks: Array<Coords>) {\r\n        this._width = width;\r\n        this._height = height;\r\n        this._blocks = blocks;\r\n    }\r\n\r\n    private _width: number;\r\n\r\n    get width(): number {\r\n        return this._width;\r\n    }\r\n\r\n    private _height: number;\r\n\r\n    get height(): number {\r\n        return this._height;\r\n    }\r\n\r\n    private _blocks: Array<Coords>;\r\n\r\n    get blocks(): Array<Coords> {\r\n        return this._blocks;\r\n    }\r\n\r\n    clone(): Field {\r\n        return new Field(this._height, this._width, Util.arrayClone(this._blocks));\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Field.ts"],"sourceRoot":""}